// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users/login": {
            "post": {
                "description": "Log in a user and return an access token, a refresh token, and user details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "schema": {
                            "$ref": "#/definitions/transport.LogInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Failed to read or unmarshal request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden. Wrong password or email.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to create token or encode response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/refresh": {
            "post": {
                "description": "Refresh an access token and return a new access token and a new refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tokens"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful refresh",
                        "schema": {
                            "$ref": "#/definitions/transport.RefreshAccessTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to refresh token or encode response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "description": "Sign up a new user and return an access token, a refresh token, and user details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User signup",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/transport.LogInResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Failed to read or unmarshal request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to insert user, create token, or encode response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user's details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval",
                        "schema": {
                            "$ref": "#/definitions/transport.GetUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to get user or encode response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Update a user's username and optionally their avatar.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User credentials",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New avatar image",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request. Failed to extract credentials or read file.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. Failed to get user, create file, write file, or update user.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "transport.GetUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/types.User"
                }
            }
        },
        "transport.LogInResponse": {
            "type": "object",
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/types.User"
                }
            }
        },
        "transport.RefreshAccessTokenResponse": {
            "type": "object",
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "types.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_submitted": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "orientation_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "referal": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
